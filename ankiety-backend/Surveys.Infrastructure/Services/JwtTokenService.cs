using System;
using System.Linq;
using System.Text;
using Surveys.Core.Settings;
using Surveys.Core.Entities;
using System.Security.Claims;
using System.Threading.Tasks;
using Surveys.Infrastructure.DTO;
using System.Collections.Generic;
using Microsoft.Extensions.Options;
using System.Security.Cryptography;
using Surveys.Infrastructure.Common;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Surveys.Infrastructure.Contexts;
using System.IdentityModel.Tokens.Jwt;
using Surveys.Infrastructure.Services.Interfaces;

namespace Surveys.Infrastructure.Services
{
    public class JwtTokenService : IJwtTokenService
    {
        private readonly SurveysContext _context;
        private readonly UserManager<User> _userManager;
        private readonly JwtTokenSettings _jwtTokenSettings;
        private readonly TokenValidationParameters _tokenValidationParameters;

        public object ClaimNames { get; private set; }

        public JwtTokenService(IOptions<JwtTokenSettings> jwtTokenSettings, 
            UserManager<User> userManager,
            SurveysContext context, 
            TokenValidationParameters tokenValidationParameters)
        {
            _context = context;
            _userManager = userManager;
            _jwtTokenSettings = jwtTokenSettings.Value;
            _tokenValidationParameters = tokenValidationParameters;
        }

        public async Task<AuthResponseDTO> GenerateJwtTokenWithRefreshToken(User user)
        {
            string jti = Guid.NewGuid().ToString();

            List<Claim> claims = new List<Claim>
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                new Claim(JwtRegisteredClaimNames.Jti, jti),
                new Claim(Common.ClaimNames.Id, user.Id)
            };

            IList<string> userRoles = await _userManager.GetRolesAsync(user);

            claims.AddRange(userRoles.Select(userRole => 
                new Claim(Common.ClaimNames.Role, userRole)));

            SymmetricSecurityKey key = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(_jwtTokenSettings.Secret));

            SigningCredentials signingCredentials = 
                new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            DateTime expires = DateTime.Now.Add(_jwtTokenSettings.TokenLifeTime);

            JwtSecurityToken token = 
                new JwtSecurityToken(_jwtTokenSettings.Issuer, 
                _jwtTokenSettings.Audience, claims, null, expires, signingCredentials);
            
            string resultToken = new JwtSecurityTokenHandler().WriteToken(token);

            RefreshToken refreshToken = new RefreshToken()
            {
                UserId = user.Id,
                CreationDate = DateTime.UtcNow,
                ExpirationDate = DateTime.UtcNow.Add(
                    _jwtTokenSettings.RefreshTokenLifeTime),
                Token = GenerateRefreshToken(),
                JwtId = jti
            };

            //TODO: Refresh token repository
            await _context.RefreshTokens.AddAsync(refreshToken);
            await _context.SaveChangesAsync();

            return new AuthResponseDTO()
            {
                Id = user.Id,
                Role = userRoles.First(),
                Token = resultToken,
                RefreshToken = refreshToken.Token
            };
        }

        public async Task<AuthResponseDTO> RefreshTokenAsync(string token, 
            string refreshToken)
        {
            //TO DO: Fix error handling
            //TO DO: Add Refresh Token repository

            ClaimsPrincipal validatedToken = GetPrincipalFromToken(token);

            //Check if token is valid (generated by backend and has valid security algorithm)
            if (validatedToken == null)
                throw new Exception("Refresh token error");

            string jti = validatedToken.Claims
                .Single(x => x.Type == JwtRegisteredClaimNames.Jti).Value;

            RefreshToken storedRefreshToken = await _context.RefreshTokens
                .SingleOrDefaultAsync(x => x.Token == refreshToken);

            if (storedRefreshToken == null)
                throw new Exception("Refresh token doesn't exist.");

            if (DateTime.UtcNow > storedRefreshToken.ExpirationDate)
                throw new Exception("Refresh token has expired.");

            if (storedRefreshToken.Invalidated)
                throw new Exception("Token has been invalidated.");

            if (storedRefreshToken.JwtId != jti)
                throw new Exception("This refresh token does not match JWT.");

            storedRefreshToken.Used = true;
            _context.RefreshTokens.Update(storedRefreshToken);
            await _context.SaveChangesAsync();

            User user = await _userManager.FindByIdAsync(
                validatedToken.Claims.Single(x => x.Type == Common.ClaimNames.Id).Value);

            return await GenerateJwtTokenWithRefreshToken(user);
        }

        public async Task InvalidateUserRefreshTokensAsync(string userId)
        {
            List<RefreshToken> userRefreshTokens = await _context.RefreshTokens
                    .Where(x => x.UserId == userId && !x.Used &&
                    !x.Invalidated && x.ExpirationDate > DateTime.UtcNow)
                    .ToListAsync();

            foreach (RefreshToken refreshToken in userRefreshTokens)
            {
                refreshToken.Invalidated = true;
            }

            await _context.SaveChangesAsync();
        }

        private ClaimsPrincipal GetPrincipalFromToken(string token)
        {
            var tokenHandler = new JwtSecurityTokenHandler();

            try
            {
                TokenValidationParameters tokenValidationParameters = 
                    _tokenValidationParameters.Clone();

                tokenValidationParameters.ValidateLifetime = false;

                ClaimsPrincipal principal = tokenHandler.ValidateToken(
                    token, tokenValidationParameters, out var validatedToken);

                return !IsJwtWithValidSecurityAlgorithm(validatedToken) ? 
                    null : principal;
            }
            catch
            {
                return null;
            }
        }

        private static bool IsJwtWithValidSecurityAlgorithm(SecurityToken validatedToken)
        {
            return (validatedToken is JwtSecurityToken jwtSecurityToken) &&
                   jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256,
                       StringComparison.InvariantCultureIgnoreCase);
        }

        private static string GenerateRefreshToken()
        {
            var refreshToken = new byte[128];
            using var rng = RandomNumberGenerator.Create();
            rng.GetBytes(refreshToken);
            return Convert.ToBase64String(refreshToken);
        }

    }
}
